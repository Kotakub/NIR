# main.py
import os
import sys
from typing import Dict, List, Any
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from lib.database.config import settings
from lib.database.database import DataBaseMain
from lib.data.generate_data import DataGenerator
from lib.backup.backup import BackupManager
from lib.database.sandbox import SandboxManager
from lib.timer.timer import QueryTimer
from investigations .plot.plot_maker import ResearchPlotter


class TestManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.db_main = DataBaseMain(settings.DATABASE_URL)
        self.db_test = DataBaseMain(settings.TEST_DATABASE_URL)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_connection –≤–º–µ—Å—Ç–æ get_database_connection
        self.data_generator = DataGenerator(self.db_main.get_connection)
        self.backup_manager = BackupManager(self.db_main.get_connection)
        self.query_timer = QueryTimer(self.db_main.get_connection)
        self.sandbox_manager = SandboxManager(
            self.db_main.get_connection,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            self.db_test.get_connection,  # –ò –∑–¥–µ—Å—å
            settings.TEST_DATABASE_URL
        )
        self.plotter = ResearchPlotter()
    
    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("=== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î...")
        self.db_main.create_tables()
        print("‚úì –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î (–ø–µ—Å–æ—á–Ω–∏—Ü—ã)...")
        if self.sandbox_manager.create_sandbox():
            print("‚úì –ü–µ—Å–æ—á–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Å–æ—á–Ω–∏—Ü—ã")
    
    def test_data_generation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –î–ê–ù–ù–´–• ===")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        self.data_generator.generate_users(5)
        print("‚úì 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
        self.data_generator.generate_schedules(3)
        print("‚úì 3 —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∏–π...")
        self.data_generator.generate_lessons(10)
        print("‚úì 10 –∑–∞–Ω—è—Ç–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏...")
        self.data_generator.generate_schedule_user(8)
        print("‚úì 8 —Å–≤—è–∑–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏...")
        self.data_generator.generate_attendance(15)
        print("‚úì 15 –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
        self.data_generator.generate_comments(7)
        print("‚úì 7 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    
    def test_backup_restore(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–≠–ö–ê–ü–ê –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø ===")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
        print("–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
        backup_path = self.backup_manager.create_backup()
        print(f"‚úì –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ (–≤ —Ç–µ—Å—Ç–æ–≤—É—é –ë–î)
        print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ –≤ —Ç–µ—Å—Ç–æ–≤—É—é –ë–î...")
        try:
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–µ–º —Å—Ö–µ–º—É –≤ —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
            self.sandbox_manager.copy_schema_to_sandbox()
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            print("‚úì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    def test_query_timing(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–ú–ï–†–ï–ù–ò–Ø –í–†–ï–ú–ï–ù–ò –ó–ê–ü–†–û–°–û–í ===")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            ("SELECT COUNT(*) FROM users", None),
            ("SELECT * FROM lessons WHERE schedule_id = %s", (1,)),
            ("SELECT u.login, s.name FROM users u JOIN schedule_user su ON u.id = su.user_id JOIN schedules s ON s.id = su.schedule_id", None)
        ]
        
        print("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤...")
        for i, (query, params) in enumerate(test_queries):
            execution_time = self.query_timer.measure_query(query, params, iterations=3)
            print(f"–ó–∞–ø—Ä–æ—Å {i+1}: {execution_time:.6f} —Å–µ–∫—É–Ω–¥")
            print(f"  SQL: {query}")
            if params:
                print(f"  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    
    def test_plotting(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í ===")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        x_data = [10, 20, 50, 100, 200]
        y_data_dict = {
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': [0.1, 0.2, 0.5, 1.0, 2.1],
            '–ó–∞–Ω—è—Ç–∏—è': [0.3, 0.6, 1.5, 3.0, 6.2],
            '–†–∞—Å–ø–∏—Å–∞–Ω–∏—è': [0.05, 0.1, 0.25, 0.5, 1.0]
        }
        
        # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        print("–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞...")
        self.plotter.create_line_plot(
            x_data=x_data,
            y_data_dict=y_data_dict,
            title="–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            x_label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫",
            y_label="–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)",
            filename="data_generation_time"
        )
        
        # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã...")
        categories = ['SELECT', 'INSERT', 'DELETE', 'JOIN']
        values_dict = {
            '–ú–∞–ª–µ–Ω—å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã': [0.001, 0.002, 0.001, 0.003],
            '–ë–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã': [0.01, 0.02, 0.015, 0.03]
        }
        
        self.plotter.create_bar_chart(
            categories=categories,
            values_dict=values_dict,
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
            x_label="–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞",
            y_label="–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)",
            filename="query_comparison"
        )
        
        print("‚úì –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    def test_sandbox_operations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π"""
        print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –° –ü–ï–°–û–ß–ù–ò–¶–ï–ô ===")
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã
        print("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –≤ –ø–µ—Å–æ—á–Ω–∏—Ü—É...")
        self.sandbox_manager.copy_schema_to_sandbox()
        print("‚úì –°—Ö–µ–º–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Å–æ—á–Ω–∏—Ü—É...")
        try:
            self.sandbox_manager.copy_all_data_to_sandbox()
            print("‚úì –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Å–æ—á–Ω–∏—Ü—ã
        print("–û—á–∏—Å—Ç–∫–∞ –ø–µ—Å–æ—á–Ω–∏—Ü—ã...")
        self.sandbox_manager.cleanup_sandbox()
        print("‚úì –ü–µ—Å–æ—á–Ω–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞")
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        
        try:
            # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
            self.setup_database()
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.test_data_generation()
            
            # 3. –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π
            self.test_sandbox_operations()
            
            # 4. –ë—ç–∫–∞–ø –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.test_backup_restore()
            
            # 5. –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            self.test_query_timing()
            
            # 6. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            self.test_plotting()
            
            print("\n" + "=" * 60)
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´!")
            print("\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            print("‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –≤ –ø–∞–ø–∫–µ: investigations/plots/")
            print("‚Ä¢ –ë—ç–∫–∞–ø—ã –≤ –ø–∞–ø–∫–µ: lib/backup/")
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –¢–ï–°–¢–û–í: {e}")
            import traceback
            traceback.print_exc()


def demonstrate_individual_components():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–¢–î–ï–õ–¨–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    db = DataBaseMain(settings.DATABASE_URL)
    generator = DataGenerator(db.get_connection)
    plotter = ResearchPlotter()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    print("\n1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:")
    generator.generate_users(2)
    generator.generate_schedules(1)
    print("‚úì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    print("\n2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:")
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    x_data = [1, 2, 3, 4, 5]
    comparison_data = {
        '–õ–∏–Ω–µ–π–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å': (x_data, [1, 2, 3, 4, 5]),
        '–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å': (x_data, [1, 4, 9, 16, 25]),
        '–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å': (x_data, [0, 1, 1.58, 2, 2.32])
    }
    
    plotter.create_comparison_plot(
        data_dict=comparison_data,
        title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
        x_label="X –∑–Ω–∞—á–µ–Ω–∏—è",
        y_label="Y –∑–Ω–∞—á–µ–Ω–∏—è", 
        filename="demo_comparison"
    )
    print("‚úì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    print("\n3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:")
    timer = QueryTimer(db.get_connection)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
    
    simple_query_time = timer.measure_query("SELECT version()")
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {simple_query_time:.6f} —Å–µ–∫")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ç–µ—Å—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
    test_manager = TestManager()
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_manager.run_comprehensive_test()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    demonstrate_individual_components()
    
    print("\nüéâ –ü–†–û–ì–†–ê–ú–ú–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ò–õ–ê –†–ê–ë–û–¢–£!")