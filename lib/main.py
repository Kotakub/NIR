# demo_custom_db.py
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'bad_subd'))

from bad_subd import custom_db

def demo_workflow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –°–£–ë–î"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ CUSTOM –°–£–ë–î")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    print("1. –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶")
    custom_db.create_all_tables()
    
    # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
    print("\n2. –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ê–ë–õ–ò–¶–ê–•")
    custom_db.demo_storage()
    
    # 3. –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\n3. –í–°–¢–ê–í–ö–ê –î–ê–ù–ù–´–•")
    
    # Users
    print("‚Üí –í—Å—Ç–∞–≤–ª—è–µ–º users...")
    custom_db.engine.insert("users", {
        "id": 1,
        "login": "alice_smith",
        "email": "alice@university.ru", 
        "password": "secure_pass_123"
    })
    
    custom_db.engine.insert("users", {
        "id": 2, 
        "login": "bob_johnson",
        "email": "bob@university.ru",
        "password": "my_password_456"
    })
    
    # Lessons
    print("‚Üí –í—Å—Ç–∞–≤–ª—è–µ–º lessons...")
    custom_db.engine.insert("lessons", {
        "id": 1,
        "schedule_id": 1,
        "teacher_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
        "subject_name": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", 
        "place": "–ê—É–¥–∏—Ç–æ—Ä–∏—è 301",
        "startDate": "2024-01-15",
        "endDate": "2024-05-20",
        "startTime": "09:00",
        "endTime": "10:30", 
        "repeat": "weekly"
    })
    
    custom_db.engine.insert("lessons", {
        "id": 2,
        "schedule_id": 1, 
        "teacher_name": "–ü–µ—Ç—Ä–æ–≤–∞ –°–≤–µ—Ç–ª–∞–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
        "subject_name": "–§–∏–∑–∏–∫–∞",
        "place": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è 205",
        "startDate": "2024-01-16", 
        "endDate": "2024-05-21",
        "startTime": "11:00",
        "endTime": "12:30",
        "repeat": "weekly"
    })
    
    # 4. –í—ã–ø–æ–ª–Ω—è–µ–º SELECT –∑–∞–ø—Ä–æ—Å—ã
    print("\n4. SELECT –ó–ê–ü–†–û–°–´")
    
    # SELECT * FROM users
    print("‚Üí SELECT * FROM users:")
    users = custom_db.engine.select("users")
    for user in users:
        print(f"   {user}")
    
    # SELECT —Å WHERE –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–ª—è
    print("\n‚Üí SELECT * FROM users WHERE id = 1:")
    user_1 = custom_db.engine.select("users", where={"id": 1})
    print(f"   {user_1}")
    
    # SELECT —Å WHERE –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø–æ–ª—è  
    print("\n‚Üí SELECT * FROM users WHERE login = 'bob_johnson':")
    bob = custom_db.engine.select("users", where={"login": "bob_johnson"})
    print(f"   {bob}")
    
    # SELECT –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    print("\n‚Üí SELECT login, email FROM users:")
    users_short = custom_db.engine.select("users", columns=["login", "email"])
    for user in users_short:
        print(f"   {user}")
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏–Ω–¥–µ–∫—Å–æ–≤
    print("\n5. –†–ê–ë–û–¢–ê –ò–ù–î–ï–ö–°–û–í")
    print("‚Üí –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—é (id):")
    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å B+Tree
    user_by_index = custom_db.engine.select("users", where={"id": 2})
    print(f"   {user_by_index}")
    
    # 6. DELETE –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("\n6. DELETE –û–ü–ï–†–ê–¶–ò–ò")
    
    # DELETE —Å WHERE
    print("‚Üí DELETE FROM users WHERE login = 'bob_johnson':")
    deleted_count = custom_db.engine.delete("users", where={"login": "bob_johnson"})
    print(f"   –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {deleted_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–∏–ª–æ—Å—å
    remaining_users = custom_db.engine.select("users")
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(remaining_users)}")
    
    # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print("\n7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
    custom_db.demo_storage()

def demo_binary_storage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    print("\n" + "="*50)
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ò–ù–ê–†–ù–û–ì–û –•–†–ê–ù–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    from bad_subd.engine import CustomDBEngine
    engine = CustomDBEngine()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    engine.create_table("demo_table", [
        {"name": "id", "type": "INT"},
        {"name": "name", "type": "VARCHAR", "size": 20},
        {"name": "description", "type": "VARCHAR", "size": 50}
    ])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage = engine._get_storage("demo_table")
    print(f"–†–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {storage.row_size} –±–∞–π—Ç")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–æ–∫–∏
    test_row = {
        "id": 123,
        "name": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å",
        "description": "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"
    }
    
    print(f"\n–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {test_row}")
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    binary_data = storage.serialize_row(test_row)
    print(f"–ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(binary_data)} –±–∞–π—Ç):")
    print(f"  HEX: {binary_data.hex()}")
    
    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    restored_row = storage.deserialize_row(binary_data)
    print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {restored_row}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    print(f"\n–°–º–µ—â–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ:")
    for col in ["id", "name", "description"]:
        offset = storage.get_column_offset(col)
        print(f"  {col}: {offset} –±–∞–π—Ç")

def demo_file_structure():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\n" + "="*50)
    print("üìÅ –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–û–í –°–£–ë–î")
    print("=" * 50)
    
    import os
    from bad_subd.config import custom_db_config
    
    base_dir = custom_db_config.BASE_DATA_DIR
    print(f"–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_dir}")
    
    for root, dirs, files in os.walk(base_dir):
        level = root.replace(base_dir, '').count(os.sep)
        indent = ' ' * 2 * level
        print(f"{indent}üìÅ {os.path.basename(root)}/")
        
        sub_indent = ' ' * 2 * (level + 1)
        for file in files:
            file_path = os.path.join(root, file)
            file_size = os.path.getsize(file_path)
            print(f"{sub_indent}üìÑ {file} ({file_size} –±–∞–π—Ç)")

if __name__ == "__main__":
    demo_workflow()
    demo_binary_storage() 
    demo_file_structure()