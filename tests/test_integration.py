# tests/test_integration.py
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from test_database import run_database_tests
from test_data_generation import run_data_generation_tests
from test_backup_restore import run_backup_restore_tests
from test_timer import run_query_timing_tests
from test_sandbox import run_sandbox_tests
from test_plots import run_plotting_tests

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    test_modules = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", run_database_tests),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", run_data_generation_tests),
        ("–ë—ç–∫–∞–ø –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", run_backup_restore_tests),
        ("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤", run_query_timing_tests),
        ("–ü–µ—Å–æ—á–Ω–∏—Ü–∞", run_sandbox_tests),
        ("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤", run_plotting_tests)
    ]
    
    results = []
    
    for module_name, test_function in test_modules:
        print(f"\n{'='*20} {module_name} {'='*20}")
        try:
            result = test_function()
            results.append((module_name, result))
        except Exception as e:
            print(f"‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ {module_name}: {e}")
            results.append((module_name, False))
    
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    success_count = 0
    for module_name, result in results:
        status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{module_name}: {status}")
        if result:
            success_count += 1
    
    print(f"\n–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: {success_count}/{len(results)}")
    
    if success_count == len(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ü–†–û–ô–î–ï–ù–û –¢–û–õ–¨–ö–û {success_count} –ò–ó {len(results)} –¢–ï–°–¢–û–í")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)